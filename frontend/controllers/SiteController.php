<?php
namespace frontend\controllers;

use alexandernst\devicedetect\DeviceDetect;
use common\models\Category;
use common\models\Gratter;
use common\models\GratterQuery;
use common\models\Request;
use frontend\models\RequestForm;
use Yii;
use yii\base\InvalidParamException;
use yii\data\Pagination;
use yii\helpers\Url;
use yii\web\BadRequestHttpException;
use yii\web\Controller;
use yii\filters\VerbFilter;
use yii\filters\AccessControl;
use common\models\LoginForm;
use frontend\models\PasswordResetRequestForm;
use frontend\models\ResetPasswordForm;
use frontend\models\SignupForm;
use frontend\models\ContactForm;
use yii\web\NotFoundHttpException;

/**
 * Site controller
 */
class SiteController extends Controller
{
    public function beforeAction($action)
    {
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }
    public function behaviors()
    {
        return [
            'access' => [
                'class' => AccessControl::className(),
                'only' => ['logout', 'signup'],
                'rules' => [
                    [
                        'actions' => ['signup'],
                        'allow' => true,
                        'roles' => ['?'],
                    ],
                    [
                        'actions' => ['logout'],
                        'allow' => true,
                        'roles' => ['@'],
                    ],
                ],
            ],
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'logout' => ['post'],
                ],
            ],
        ];
    }
    public function actions()
    {
        return [
            'error' => [
                'class' => 'yii\web\ErrorAction',
            ],
            'captcha' => [
                'class' => 'yii\captcha\CaptchaAction',
                'fixedVerifyCode' => YII_ENV_TEST ? 'testme' : null,
            ],
        ];
    }
    public function actionIndex()
    {
        $categories_count = Category::find()->count();
        $gratter_count = Gratter::find()->count();

        return $this->render('index', [
            'categories_count' => $categories_count,
            'gratters_count' => $gratter_count
        ]);
    }
    public function actionFullPost($id = NULL){
        $post = Gratter::findOne($id);

        if(is_null($post) || is_null($id)){
            return json_encode([]);
        }

        return json_encode($post->toArray());
    }
    public function actionGetPosts($start = NULL, $count = NULL){
        $raw_data = Gratter::find()->offset($start)->limit($count)->all();
        $data = array();

        foreach ($raw_data as $item) {
            $data[] = $item->toArray();
        }

        return $this->render('index', ['data' => json_encode($data)] );
    }
    public function actionPostsCount(){
        $count = Gratter::find()->count();
        return json_encode($count);
    }
    public function actionList($category_id = NULL, $great_num = NULL){
        $great = NULL;
        if(!is_null($great_num)){
            $great = Gratter::find()->where(['id' => $great_num])->one();

            return $this->render('great', ['model' => $great]);
        }
        $query = NULL;
        $category = Category::find()->where(['id' => $category_id])->one();
        if(is_null($category_id)){
            $query = Gratter::find();
        }else{
            $query = Gratter::find()->where(['category_id' => $category_id]);
        }
        $countQuery = clone $query;

        $pages = new Pagination(['totalCount' => $countQuery->count(), 'pageSize' => 10]);
        // приводим параметры в ссылке к ЧПУ
        $pages->pageSizeParam = true;

        $models = $query->offset($pages->offset)
            ->limit($pages->limit)
            ->all();
        // Передаем данные в представление
        return $this->render('list', [
            'models' => $models,
            'pages' => $pages,
            'category_name' => $category->title,
        ]);
    }
    public function actionGet($id = NULL){
        if(is_null($id)){
            throw new NotFoundHttpException("Нет такой страницы!");
        }

        $gratter = Gratter::findOne($id);

        return $this->renderAjax('get', ['gratter' => $gratter]);
    }
    public function actionRequest()
    {
        $form = new RequestForm();

        if (\Yii::$app->request->isPost && $form->load(\Yii::$app->request->post()) && $form->validate()) {
            $complete = $form->save(false);
            return $this->render('save', ['complete' => $complete]);
        }

        return $this->render('request', ['model' => $form]);
    }
}
